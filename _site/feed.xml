<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-01-28T22:34:04-07:00</updated><id>http://localhost:4000//</id><title type="html">Geek-O-System</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Selecting Apprentices</title><link href="http://localhost:4000/2015/09/27/selecting-apprentices.html" rel="alternate" type="text/html" title="Selecting Apprentices" /><published>2015-09-27T14:56:40-06:00</published><updated>2015-09-27T14:56:40-06:00</updated><id>http://localhost:4000/2015/09/27/selecting-apprentices</id><content type="html" xml:base="http://localhost:4000/2015/09/27/selecting-apprentices.html">&lt;blockquote&gt;
  &lt;p&gt;This is the second post on my experience running the &lt;a href=&quot;http://www.mx.com/company/apprenticeships/&quot;&gt;MX ruby apprenticeship program&lt;/a&gt;.
The &lt;a href=&quot;/blog/2015/09/09/hiring-apprentices/&quot;&gt;Previous Post&lt;/a&gt; focused on our goals and plans for the apprenticeship.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With dates planned it was time to get some applications for the apprenticeship.
How should someone apply to the apprenticeship?
How would we know which candidates best fit our criteria of being self-motivated to learn new things and tackle hard problems?
Who would bother applying in the first place?&lt;/p&gt;

&lt;h2 id=&quot;the-application&quot;&gt;The Application&lt;/h2&gt;

&lt;p&gt;Since we had a pretty ambiguous selection criteria, we decided to use a similarly ambiguous application medium.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make us a page, anywhere on the internet, that provides evidence that you are self-motivated, learn new things easily and like to solve complex problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The requirement of making a page helps to enforce our base criteria for what skills an apprentice should have coming into the program.
But it also lets the apprentices have a lot of freedom in choosing how to present themselves.
They could use videos, animations, gifs, etc.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;We ended up receiving 55 applications and they were as different from each other as we were hoping.
Here are a few that caught our attention:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dahunter.github.io/&quot;&gt;Danielle Hunter&lt;/a&gt; created a page that was compelling both visually and as a narrative (protip: read the recommendation at the bottom).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aperezmontan.github.io/&quot;&gt;Aristides Perez&lt;/a&gt; came out of the DevBootcamp program and had a good overview of some of this projects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jeansimon.me/mx&quot;&gt;Jean Simon&lt;/a&gt; is an excellent of example of keeping it very simple. There is very little visually happening, but the writing was compelling to us.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cam.thefitdeveloper.com/&quot;&gt;Cam Kidman&lt;/a&gt; is one of the only examples I’ve seen where calling out your strengths &lt;em&gt;and weaknesses&lt;/em&gt; came off really well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;evaluation&quot;&gt;Evaluation&lt;/h2&gt;

&lt;p&gt;Given such a diverse set of applications we needed a way to evaluate them to pick a set of people to bring back for interviews.
I made a github repo called &lt;code class=&quot;highlighter-rouge&quot;&gt;apprenticeship-applications&lt;/code&gt; and created an issue for each applicant that contained a link to their application.
The entire MX engineering team pitched in to spend a few minutes evaluating different candidates.
Team members would notice different things and add comments about the applicants’ github history, application page and even twitter accounts.&lt;/p&gt;

&lt;p&gt;During this phase of evaluation there were a lot of disagreements between the reviewers.
People would comment about a given applicant’s skill level, and another engineer would comment that we aren’t selecting for skills, we are selecting for potential.
There were a lot of discussions in the github issues and in person about which applicants looked the strongest.&lt;/p&gt;

&lt;p&gt;Eventually one person needed to see them all so that the judging could be done on a single scale.
So after all the other comments I went through and scored each of the 55 applications and picked 15 people to bring in for interviews.
Reading 55 applications takes a long time and I noticed a few trends for which ones stood out to me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Any kind of public programming history was much better than none.&lt;/strong&gt;
When reviewing an application it was really hard for me to feel confident in our ability to get someone up to speed if there was no visible history of their work (ie. github, bitbucket, googlecode, etc)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Working applications are less convincing than a story.&lt;/strong&gt;
This one surprised me.
Lots of people applied with a link to a site that they had built,
But this made it really hard to evaluate anything about the person other than the fact that they can build an app.
Understanding why they built it, who helped them or how they overcame problems along the way was very helpful.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid phrases like “fast learner” or “hard worker”.&lt;/strong&gt;
Telling a story about what you learned and how you used it is much more compelling than designating yourself as a fast learner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interviewing&quot;&gt;Interviewing&lt;/h2&gt;

&lt;p&gt;In order for the apprenticeship to work, we really needed the apprentices to teach each other.
So we organized the interview process as small groups (2 to 4 people) and we would give them an example problem to work on as a team.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://gist.github.com/mmmries/e10b582287f167ab692f&quot;&gt;example problem&lt;/a&gt; was to take a monthly budget and a list of goals and predict when each goal would complete.
We gave applicants the option to document their solution as a verbal description, a flowchart, pseudocode or actual code.
Most applicants chose to discuss the problem by writing ruby or javascript code back and forth as they were talking.
We were evaluating their ability to verbally discuss a technical problem, to collaborate as a team and to solve the problem.&lt;/p&gt;

&lt;p&gt;After a lot of arguing in the application process, this stage of evaluation was extremely smooth.
After each group interview I would ask each engineer who had been there to rank the applicants and the rankings were nearly identical.
The biggest disparity that existed was whether to rank an applicant as 2nd or 3rd.
These small disparities did not end up facotring into the final hiring decisions.&lt;/p&gt;

&lt;h2 id=&quot;the-outcome&quot;&gt;The Outcome&lt;/h2&gt;

&lt;p&gt;Although we originally intended to hire 3 apprentices, we ended up offering a position to 5 and all of them accepted.
We are thrilled that &lt;a href=&quot;http://www.jeansimon.me/&quot;&gt;Jean Simon&lt;/a&gt;, &lt;a href=&quot;http://cam.thefitdeveloper.com/&quot;&gt;Cam Kidman&lt;/a&gt;, &lt;a href=&quot;http://aperezmontan.github.io/&quot;&gt;Aristides Perez&lt;/a&gt;, &lt;a href=&quot;https://github.com/wirdnah/&quot;&gt;Andrew Lewin&lt;/a&gt; and &lt;a href=&quot;http://www.tobyredd.com/#/&quot;&gt;Toby Redd&lt;/a&gt; have joined the team as apprentices.
Along the way we learned that there are a lot more talented candidates than we had thought.&lt;/p&gt;</content><category term="interviewing" /><category term="hiring" /><category term="apprenticeship" /><category term="mentoring" /><category term="ruby" /><summary type="html">This is the second post on my experience running the MX ruby apprenticeship program.
The Previous Post focused on our goals and plans for the apprenticeship.</summary></entry><entry><title type="html">Planning An Apprenticeship</title><link href="http://localhost:4000/2015/09/09/hiring-apprentices.html" rel="alternate" type="text/html" title="Planning An Apprenticeship" /><published>2015-09-09T14:44:39-06:00</published><updated>2015-09-09T14:44:39-06:00</updated><id>http://localhost:4000/2015/09/09/hiring-apprentices</id><content type="html" xml:base="http://localhost:4000/2015/09/09/hiring-apprentices.html">&lt;p&gt;The &lt;a href=&quot;http://mx.com/&quot;&gt;MX&lt;/a&gt; apprenticeship has been a lot of work and fun so far.
This blog post is the beginning of an effort to document what I’ve learned along the way.&lt;/p&gt;

&lt;h1 id=&quot;the-goal&quot;&gt;The Goal&lt;/h1&gt;

&lt;p&gt;I initially got interested in the idea of an apprenticeship while listening to the &lt;a href=&quot;https://devchat.tv/ruby-rogues/190-rr-apprenticeship-with-joseph-mastey-and-jill-lynch-of-enova&quot;&gt;ruby rogues episode with Joe Mastey and Jill Lynch&lt;/a&gt;.
I help organize a &lt;a href=&quot;http://utruby.org/#uv.rb&quot;&gt;local ruby meetup group&lt;/a&gt;, so I liked the idea of helping new engineers.
I also love my job at MX and want to see the team grow.&lt;/p&gt;

&lt;p&gt;My early motivation was focused on facilitating the learning that comes with a first professional programming job, but I knew that goal of the apprenticeship needed to be focused on the company sponsoring it.
I decided that the primary objective was to &lt;strong&gt;add amazing engineers to the MX team&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;amazing-people&quot;&gt;Amazing People&lt;/h1&gt;

&lt;p&gt;Based on my experience in the local Ruby community, I believed there were some really amazing programmers who were self-taught that were struggling to find a first job programming.
I also met many bootcamp graduates with the same problem.&lt;/p&gt;

&lt;p&gt;The shortage of senior engineers has made it really difficult to get a job as a junior developer.
Many companies think they can’t hire junior engineers because they don’t have enough senior people to train them.
There are also serious bias issues throughout the software industry and especially in the hiring processes.&lt;/p&gt;

&lt;p&gt;I had no solid evidence at this point, but it seemed there was a large pool of extremely talented and hard-working people that was underutilized.&lt;/p&gt;

&lt;h1 id=&quot;the-gap&quot;&gt;The Gap&lt;/h1&gt;

&lt;p&gt;On our team, we usually only considered hiring someone if they had programmed professionally for at least a year.
This is partially because our team has no managers and no task assignment.
This autonomy is great for engineers with a lot of experience, but makes it very easy to get lost as a new junior developer.
If we wanted to make an apprenticeship work for us, we needed the apprentices to have skills and experience similar to someone with one full year of professional experience.&lt;/p&gt;

&lt;p&gt;Does it actually take a year to gain that experience?&lt;/p&gt;

&lt;p&gt;My first job wasted a lot of time because the experienced people on the team were too busy to provide guidance.
I often spent countless hours trying to track down a single bug.
I remember losing sleep over a database query that took too long no matter what index I tried to create.
Later another programmer explained how indices are handled in the database and it was immediately obvious why my we needed to change the schema rather than add an index.
I rarely got feedback on my projects unless they broke something in production.
How much faster could I have gained “1 year of experience” if I had spent just an hour or two on those issues?
What learning experiences would I have missed out on?&lt;/p&gt;

&lt;p&gt;I also had a few experiences at my second job where the company was short handed and they gave projects to me and another new engineer.
Neither of us was qualified to tackle these projects, but we both learned an immense amount because we felt responsible for the outcome and we learned constantly from one another.
There was no friction about who was working faster, or who had more experience.
We just worked really hard to make the project work and learned a lot along the way.&lt;/p&gt;

&lt;p&gt;Talking to other engineers, I found that my experience was not unique.
Learning to program is often fraught with huge wastes of time and only occasionally do you find yourself in a context where the learning comes quickly.
I had no good way to calculate how inefficient this process might be, so I made a guess that &lt;strong&gt;we could fill this gap with a three month apprenticeship&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-makes-a-good-apprentice&quot;&gt;What Makes a Good Apprentice?&lt;/h1&gt;

&lt;p&gt;We had a lot of discussions internally about who we wanted to bring in as apprentices.
Would we consider hiring people with no programming experience at all?
Did long-term potential mean more than their current skill set?
What evidence of long-term potential were we looking for?&lt;/p&gt;

&lt;p&gt;My biggest fear was that we might hire people as apprentices, spend 3 months and find that they had not closed the gap in skills and experience.
This is my definition of failure.&lt;/p&gt;

&lt;p&gt;To mitigate this risk we decided to aim our apprenticeship at people with enough programming experience that they could already build some sort of web-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; app.
We preferred experience in Ruby because that would be the tool they would be using in the apprenticeship.
We felt that this skill requirement was higher than we wanted, but we didn’t have enough evidence yet to try filling a bigger gap in skills.&lt;/p&gt;

&lt;p&gt;We decided that once someone had met that minimum bar we wanted to heavily weight our decision towards long-term potential.
The evidence we would look for was a track record of being self-motivated to learn new things and tackle hard problems.&lt;/p&gt;

&lt;p&gt;This was still a somewhat ambiguous criteria, but we were comfortable with the ambiguity because we knew that we were going outside the normal hiring practices.&lt;/p&gt;

&lt;h1 id=&quot;what-makes-a-good-apprenticeship&quot;&gt;What Makes A Good Apprenticeship?&lt;/h1&gt;

&lt;p&gt;I liked the idea of a set curriculum for a few reasons, but my attempts to write a curriculum ended in dismal failure.
Being a developer &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; being an educator.&lt;/p&gt;

&lt;p&gt;Around this time I stopped thinking of how to teach more efficiently and started to think, “how can the apprentices learn four times more efficiently than I did?”
This change in focus felt right.
It wasn’t our job to fill the gap.
We needed to create a context where the apprentices could be in that sweet spot of learning.
I decided that being part of a team of peers and having access to more experienced developers were the two key things we would focus on.&lt;/p&gt;

&lt;p&gt;The peer aspect would be handled by hiring apprentices in a group.
They would be assigned projects as a team to encourage collaboration.&lt;/p&gt;

&lt;p&gt;For mentorship we decided to have a direct mentor and a rotating schedule of senior mentors.
This direct mentor has between 1 and 3 years of professional experience and sets aside one hour each day to helping their apprentice.
Senior mentors have 5+ years of experience and are on a rotating schedule to help provide a broader range of experiences.
Each week there is a single senior mentor who makes 90 minutes available to each apprentice.
Apprentices mostly dictate the way mentorship time is to be used.
Mentors make the resource available, apprentices choose how to use that resource to make their learning time efficient.&lt;/p&gt;

&lt;h1 id=&quot;the-plan&quot;&gt;The Plan&lt;/h1&gt;

&lt;p&gt;At this point we had a few ideas about who we wanted to find and how we wanted to help them learn.
None of these ideas were founded on research or expertise.
What could go wrong?
In typical developer fashion, we assumed we could significantly change outcomes by applying just a few simple rules to a complex system.&lt;/p&gt;

&lt;p&gt;Despite the lack of credentials for these ideas, I continued to feel convinced that participating in this type of apprenticeship would have made my early development life a lot better.
Surprisingly, my company went along with the idea and we started planning for an apprenticeship that would run from September to December 2015.&lt;/p&gt;</content><category term="hiring" /><category term="apprenticeship" /><category term="mentoring" /><category term="ruby" /><summary type="html">The MX apprenticeship has been a lot of work and fun so far.
This blog post is the beginning of an effort to document what I’ve learned along the way.</summary></entry><entry><title type="html">Controlling a Servo with Artoo</title><link href="http://localhost:4000/2014/05/12/controlling-a-servo-with-artoo.html" rel="alternate" type="text/html" title="Controlling a Servo with Artoo" /><published>2014-05-12T21:51:15-06:00</published><updated>2014-05-12T21:51:15-06:00</updated><id>http://localhost:4000/2014/05/12/controlling-a-servo-with-artoo</id><content type="html" xml:base="http://localhost:4000/2014/05/12/controlling-a-servo-with-artoo.html">&lt;p&gt;Now that I have &lt;a href=&quot;/blog/2014/04/25/facial-recognition-with-spyglass/&quot;&gt;some basic facial recognition&lt;/a&gt; working we need to be able to control the direction of the camera. The first step to do this is to get some wires connected from my laptop to a servo and send signals that control the motion of the servo.&lt;/p&gt;

&lt;h1 id=&quot;ingredients&quot;&gt;Ingredients&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://artoo.io/documentation/drivers/servo/&quot;&gt;Artoo.io&lt;/a&gt; has a really simple interface for handling gpio like servos. In my case I used a &lt;a href=&quot;http://digistump.com/products/1&quot;&gt;digispark&lt;/a&gt; to get access to some gpio pins that my laptop can control. Eventually I will use the &lt;a href=&quot;http://beagleboard.org/Products/BeagleBone+Black&quot;&gt;Beagle Bone Black&lt;/a&gt; to control the servos, but the digispark gives me an easy way to test this out for just $9.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;preparation&quot;&gt;Preparation&lt;/h1&gt;

&lt;p&gt;First I had to solder the headers to the digispark when it arrived. This always stresses me out because I am not very good at soldering and I worry about getting the embedded components too hot and frying the chip before I even use it. I really wish companies would offer an option to buy the hardware pre-soldered for an extra couple of dollars. An hour later it was soldered and didn’t look broken.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://artoo.io/documentation/platforms/digispark/#HowToConnect&quot;&gt;the artoo docs&lt;/a&gt; we need to run two commands in order to get our connection to the digispark working. First we need to run a command that uploads a new firmware to the digispark. Let’s give it a whirl:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ artoo littlewire upload
         run  /Users/michael/.rvm/gems/ruby-2.1.0/.artoo/commands/littlewireLoader_v13 from &quot;.&quot;
/Users/michael/.rvm/gems/ruby-2.1.0/.artoo/commands/littlewireLoader_v13: /Users/michael/.rvm/gems/ruby-2.1.0/.artoo/commands/littlewireLoader_v13: cannot execute binary file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well that didn’t work. Let’s at least try to scan the usb devices to figure out the vendor and product ID that we need in to configure out artoo code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ artoo scan usb
OS not yet supported...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point you may be feeling like a sad panda, but there is always another way. I booted my laptop to ubuntu from a live  USB drive and tried installing the artoo gem again. I don’t know anyone from the &lt;a href=&quot;http://hybridgroup.com/&quot;&gt;Hybrid Group&lt;/a&gt;, but I heard &lt;a href=&quot;https://twitter.com/deadprogram&quot;&gt;Ron Evans&lt;/a&gt; on the &lt;a href=&quot;http://rubyrogues.com/&quot;&gt;Ruby Rogues&lt;/a&gt; and he sounded like the kind of person that runs a linux distro so I was hoping that the gems would run more smoothly on ubuntu.&lt;/p&gt;

&lt;p&gt;Sure enough once ruby was running and the gems were installed the two commands ran fine and I was read to test.&lt;/p&gt;

&lt;h1 id=&quot;the-dish&quot;&gt;The Dish&lt;/h1&gt;

&lt;p&gt;Now we are ready to write some code that changes the position of the servo. This turns out to be trivial. I used a couple of standard bread-board type wires to connect the servo’s ground, 5v and signal wires to the ground, 5v and pin1 pins on the digispark and fired up this code (this code runs both on Ubuntu and OSX).&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'artoo'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:digispark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:adaptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:littlewire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:vendor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0c9f&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:device_info&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:servo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:servo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pin must be a PWM pin&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Firmware name: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;firmware_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Firmata version: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;servo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Current position: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_angle&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this is what happened!&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/ISK5bVShs2w&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;friendly-bot-milestones&quot;&gt;&lt;a href=&quot;/blog/2014/04/23/planning-friendly-bot&quot;&gt;Friendly Bot&lt;/a&gt; Milestones&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Write some code that can detect a face in an image&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Write some artoo code that can control a servo&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Make a webcam mount with servos for pan and tilt&lt;/li&gt;
  &lt;li&gt;Write some artoo code that controls the roomba&lt;/li&gt;
  &lt;li&gt;Load code onto the Beagle Bone Black that controls the roomba and servos&lt;/li&gt;
  &lt;li&gt;Load code onto the Beagle Bone Black that can detect faces seen by the webcam&lt;/li&gt;
  &lt;li&gt;Write some glue code on the Beagle Bone Black that turns the roomba and servos to keep a face in the center of the image&lt;/li&gt;
  &lt;li&gt;Make the roomba wander until it finds a face to follow (first time we can use the title Friendly Bot)&lt;/li&gt;
  &lt;li&gt;Make friendly bot play the “curious” beeps when it finds a face&lt;/li&gt;
  &lt;li&gt;Make Friendly Bot recognize family members and do “happy” or “skeptical” beeps&lt;/li&gt;
&lt;/ol&gt;</content><category term="ruby" /><category term="artoo" /><category term="friendly-bot" /><category term="digispark" /><summary type="html">Now that I have some basic facial recognition working we need to be able to control the direction of the camera. The first step to do this is to get some wires connected from my laptop to a servo and send signals that control the motion of the servo.</summary></entry><entry><title type="html">Facial Recognition With Spyglass</title><link href="http://localhost:4000/2014/04/25/facial-recognition-with-spyglass.html" rel="alternate" type="text/html" title="Facial Recognition With Spyglass" /><published>2014-04-25T21:40:38-06:00</published><updated>2014-04-25T21:40:38-06:00</updated><id>http://localhost:4000/2014/04/25/facial-recognition-with-spyglass</id><content type="html" xml:base="http://localhost:4000/2014/04/25/facial-recognition-with-spyglass.html">&lt;p&gt;The first step in working towards &lt;a href=&quot;/blog/2014/04/23/planning-friendly-bot&quot;&gt;Friendly Bot&lt;/a&gt; is to get some code working that can capture an image from a webcam and detect a face in it.
I knew that &lt;a href=&quot;http://opencv.org/&quot;&gt;OpenCV&lt;/a&gt; had facilities for doing facial recognition, but I was hoping to avoid some of the documentation pain that I have heard about from other people.
I did a quick search for rubygems that wrapped opencv and found &lt;a href=&quot;https://github.com/andremedeiros/spyglass&quot;&gt;spyglass&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/superdealloc&quot;&gt;André Medeiros&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Spyglass makes a serious attempt to simplify the OpenCV API and so far it looks very promising. There is even &lt;a href=&quot;https://github.com/andremedeiros/spyglass/blob/master/examples/cascade_classifier.rb&quot;&gt;a great example of doing facial recognition&lt;/a&gt; that got me started almost immediately.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Before I could install spyglass I needed to install OpenCV.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ brew install opencv&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The OpenCV classifier needs an xml document that tells it what features to look for. Luckily a bunch of examples come installed with OpenCV.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ ls /usr/local/Cellar/opencv/2.4.8.2/share/OpenCV/haarcascades/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;haarcascade_eye.xml
haarcascade_eye_tree_eyeglasses.xml
haarcascade_frontalface_alt.xml
haarcascade_frontalface_alt2.xml
haarcascade_frontalface_alt_tree.xml
haarcascade_frontalface_default.xml
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I installed spyglass and made one slight adaptation to the example provided in the gem.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'spyglass'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./lib/face_picker'&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Spyglass&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CascadeClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./haarcascade_frontalface_default.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Video&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VideoCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;scale_factor: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;min_size: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pick the biggest face found&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw_rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Basically I wanted to avoid having multiple faces in the image so I did a quick “pick the biggest one” and drew a box around it in the frame.&lt;/p&gt;

&lt;h2 id=&quot;wait-is-it-seriously-that-easy&quot;&gt;Wait, is it seriously that easy?&lt;/h2&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/FATO0nC8SnY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;friendly-bot-milestones&quot;&gt;&lt;a href=&quot;/blog/2014/04/23/planning-friendly-bot&quot;&gt;Friendly Bot&lt;/a&gt; Milestones&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Write some code that can detect a face in an image&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Write some artoo code that can control a servo&lt;/li&gt;
  &lt;li&gt;Make a webcam mount with servos for pan and tilt&lt;/li&gt;
  &lt;li&gt;Write some artoo code that controls the roomba&lt;/li&gt;
  &lt;li&gt;Load code onto the Beagle Bone Black that controls the roomba and servos&lt;/li&gt;
  &lt;li&gt;Load code onto the Beagle Bone Black that can detect faces seen by the webcam&lt;/li&gt;
  &lt;li&gt;Write some glue code on the Beagle Bone Black that turns the roomba and servos to keep a face in the center of the image&lt;/li&gt;
  &lt;li&gt;Make the roomba wander until it finds a face to follow (first time we can use the title Friendly Bot)&lt;/li&gt;
  &lt;li&gt;Make friendly bot play the “curious” beeps when it finds a face&lt;/li&gt;
  &lt;li&gt;Make Friendly Bot recognize family members and do “happy” or “skeptical” beeps&lt;/li&gt;
&lt;/ol&gt;</content><category term="ruby" /><category term="opencv" /><category term="spyglass" /><category term="friendly-bot" /><summary type="html">The first step in working towards Friendly Bot is to get some code working that can capture an image from a webcam and detect a face in it.
I knew that OpenCV had facilities for doing facial recognition, but I was hoping to avoid some of the documentation pain that I have heard about from other people.
I did a quick search for rubygems that wrapped opencv and found spyglass by André Medeiros.</summary></entry><entry><title type="html">Planning Friendly Bot</title><link href="http://localhost:4000/2014/04/23/planning-friendly-bot.html" rel="alternate" type="text/html" title="Planning Friendly Bot" /><published>2014-04-23T21:14:01-06:00</published><updated>2014-04-23T21:14:01-06:00</updated><id>http://localhost:4000/2014/04/23/planning-friendly-bot</id><content type="html" xml:base="http://localhost:4000/2014/04/23/planning-friendly-bot.html">&lt;p&gt;In many ways Robotics was my first tech love. I remember my dad bringing home a broken printer from work and I took it apart and used the parts to make a little machine that had some LED eyes and drove itself forward and backward.  It wasn’t really a robot, but it got me so interested in robotics that I started learning to program.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I paid my way through university (&lt;a href=&quot;http://byu.edu/&quot;&gt;BYU&lt;/a&gt;) by taking web development contracts, but at school I was studying computer engineering so that I could build a robot for my &lt;a href=&quot;https://www.youtube.com/watch?v=p_uHdzVdef4&quot;&gt;senior project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once I got my first job I spent most of my free time learning more about software. I had a few ambitious ideas about robots, but never seemed to get them off the ground. Now that I have a young son (3yr) I have found my ambition for robotics growing again. It is basically impossible to get a 3yr old excited about a webserver or database.&lt;/p&gt;

&lt;p&gt;So I started thinking through all my old ideas and tried to find one that is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feasible&lt;/li&gt;
  &lt;li&gt;would make a 3yr old excited&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I envisioned a robot that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Would not break immediately upon being touched&lt;/li&gt;
  &lt;li&gt;Would not creep people out&lt;/li&gt;
  &lt;li&gt;Appears to be interested in human beings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I imagined a small robot with a camera that would wander around until it saw a human face. When it saw the face it would make a few “curious” beeps (inspired by R2D2) and try to drive itself to get a better view of the face. If it recognizes the person it will make some “happy” beeps and follow that persons face for about 30sec. If it doesn’t recognize the person it will make some “skeptical” beeps and go back to wandering.&lt;/p&gt;

&lt;p&gt;So here are my plans for “Friendly Bot”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Roomba as the main body + drive platform&lt;/li&gt;
  &lt;li&gt;A webcam for vision&lt;/li&gt;
  &lt;li&gt;Webcam can pan and tilt via servos (greater range of vision)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://opencv.org/&quot;&gt;OpenCV&lt;/a&gt; to do face detection and facial recognition&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://beagleboard.org/Products/BeagleBone+Black&quot;&gt;Beagle Bone Black&lt;/a&gt; as the onboard computing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://artoo.io/&quot;&gt;Artoo.io&lt;/a&gt; to control the servos and roomba&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My milestones that I want to hit in the project will be something like&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write some code that can detect a face in an image&lt;/li&gt;
  &lt;li&gt;Write some artoo code that can control a servo&lt;/li&gt;
  &lt;li&gt;Make a webcam mount with servos for pan and tilt&lt;/li&gt;
  &lt;li&gt;Write some artoo code that controls the roomba&lt;/li&gt;
  &lt;li&gt;Load code onto the Beagle Bone Black that controls the roomba and servos&lt;/li&gt;
  &lt;li&gt;Load code onto the Beagle Bone Black that can detect faces seen by the webcam&lt;/li&gt;
  &lt;li&gt;Write some glue code on the Beagle Bone Black that turns the roomba and servos to keep a face in the center of the image&lt;/li&gt;
  &lt;li&gt;Make the roomba wander until it finds a face to follow (first time we can use the title Friendly Bot)&lt;/li&gt;
  &lt;li&gt;Make friendly bot play the “curious” beeps when it finds a face&lt;/li&gt;
  &lt;li&gt;Make Friendly Bot recognize family members and do “happy” or “skeptical” beeps&lt;/li&gt;
&lt;/ol&gt;</content><category term="robotics" /><category term="artoo" /><category term="opencv" /><category term="beagleboneblack" /><category term="ruby" /><category term="friendly-bot" /><summary type="html">In many ways Robotics was my first tech love. I remember my dad bringing home a broken printer from work and I took it apart and used the parts to make a little machine that had some LED eyes and drove itself forward and backward.  It wasn’t really a robot, but it got me so interested in robotics that I started learning to program.</summary></entry><entry><title type="html">PStore is Amazing</title><link href="http://localhost:4000/2014/03/25/pstore-is-amazing.html" rel="alternate" type="text/html" title="PStore is Amazing" /><published>2014-03-25T21:35:00-06:00</published><updated>2014-03-25T21:35:00-06:00</updated><id>http://localhost:4000/2014/03/25/pstore-is-amazing</id><content type="html" xml:base="http://localhost:4000/2014/03/25/pstore-is-amazing.html">&lt;h2 id=&quot;tldr-want-to-play-with-an-object-database-skip-maglev-and-play-with-pstore&quot;&gt;TL\DR; Want to play with an object database? Skip Maglev and play with PStore.&lt;/h2&gt;

&lt;p&gt;My last few posts have been about my adventures of trying to get Puma to run on &lt;a href=&quot;http://maglev.github.io/&quot;&gt;Maglev&lt;/a&gt;. That adventure began because &lt;a href=&quot;https://twitter.com/Johnny_T&quot;&gt;Johnny T&lt;/a&gt; infected my brain with the the idea of persistent objects.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The idea that I could stop making applications in terms of relational tables and just create object graphs that can be persisted with ACID transactions.&lt;/p&gt;

&lt;h1 id=&quot;the-city-on-a-hill&quot;&gt;The City On a Hill&lt;/h1&gt;

&lt;p&gt;As I explored this idea I was awe struck to realize how much of my code, and how much of my time thinking about code was being spent on that barrier. I had been programming with a database in mind since the early days of my programming experience. I had brainwashed myself into thinking of my code in terms of the relational tables that would store my data.&lt;/p&gt;

&lt;p&gt;You might think that removing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;Object-Relational Impedance Mismatch&lt;/a&gt; is a matter of convenience. Clearly not all of the logic you spend your time working on is focused on bridging that gap. So does it give you an extra 10% or maybe even 20% of your programming bandwidth back?&lt;/p&gt;

&lt;p&gt;In my experience thus far, programming purely with objects feels like getting 50% of my bandwidth back.&lt;/p&gt;

&lt;h1 id=&quot;the-hill&quot;&gt;The hill&lt;/h1&gt;

&lt;p&gt;Unfortunately the reality of using Maglev today is that you will spend most of your time shaving yaks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to use RSpec to run a test?&lt;/em&gt; It raises an exception on Maglev.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to use Virtus?&lt;/em&gt; The gem doesn’t build on Maglev.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to use Puma?&lt;/em&gt; See the recent posts.&lt;/p&gt;

&lt;p&gt;The constant yak shave almost killed my enthusiasm for the dream.&lt;/p&gt;

&lt;h1 id=&quot;an-alternate-path&quot;&gt;An Alternate Path&lt;/h1&gt;

&lt;p&gt;About a month ago I took some time off of Maglev to prepare a &lt;a href=&quot;http://hqmq.github.io/presentation-accidental-design/&quot;&gt;presentation&lt;/a&gt; for &lt;a href=&quot;http://mtnwestrubyconf.org/&quot;&gt;Mountain West Ruby Conf&lt;/a&gt;. I was selected as a backup speaker in case one of the main speakers had an emergency, but the conference ran smoothly and I never ended up giving the presentation.  During my time off I found myself wondering if there were a way for me to experiment with transparent object persistence without using Maglev.&lt;/p&gt;

&lt;p&gt;After much googling that turned up nothing of interest I remembered &lt;a href=&quot;http://www.ruby-doc.org/stdlib-2.1.1/libdoc/pstore/rdoc/PStore.html&quot;&gt;PStore&lt;/a&gt; which is in the Ruby Standard Library!  It supports thread-safe transactional access to a persistent root. It even notices if the same object exists multiple times in the object graph and will maintain that referential integrity. I love you PStore!&lt;/p&gt;

&lt;p&gt;The main difference from a true object database is that it does not persist object definitions. So if you define a class and then make a bunch of instances and save them, you can only pull them back out again if your current process has loaded the definition for that class. This has turned out not to be a huge limitation in terms of my experimentation right now. I’m already used to tools that have to load my whole app into memory on boot.&lt;/p&gt;

&lt;h1 id=&quot;a-sample&quot;&gt;A Sample&lt;/h1&gt;

&lt;p&gt;I have begun trying to make a new backend for &lt;a href=&quot;http://golf.riesd.com/&quot;&gt;my golf score app&lt;/a&gt; since it is a &lt;a href=&quot;https://github.com/hqmq/golf-score-grapher&quot;&gt;smallish app&lt;/a&gt; with a few quirks. It makes a pretty easy testbed for trying out new ideas, while keeping focused on a defined set of functionality.&lt;/p&gt;

&lt;p&gt;To begin with I defined a basic &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; app and setup the config.ru file to include a middleware which wraps every request in a PStore transaction.&lt;/p&gt;

&lt;p&gt;```ruby config.ru
require ‘my_sinatra_app’&lt;/p&gt;

&lt;p&gt;DB = PStore.new(“tmp/golfscore_grapher.pstore”, true)&lt;/p&gt;

&lt;p&gt;class DbTransactionMiddleware
  def initialize(app)
    @app = app
  end&lt;/p&gt;

&lt;p&gt;def call(env)
    DB.transaction do
      @app.call(env)
    end
  end
end&lt;/p&gt;

&lt;p&gt;use DbTransactionMiddleware
run GolfscoreGrapher&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
I immediately asked myself how bad the performance will be if I have to access the whole pstore all the time. So I wrote a quick rake task to import some data, made a sinatra action that accessed my pstore and generated some JSON and then benchmarked it.

```ruby
# the sinatra action
get '/players.json' do
  JSON.generate(DB[:players].map(&amp;amp;:attributes))
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ab -n 1000 -c 1 &lt;span class=&quot;s1&quot;&gt;'http://127.0.0.1:9292/players.json'&lt;/span&gt;
...
Time per request:       4.813 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ms] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mean&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
...
Connection Times &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:     4    5   1.7      4      32
Waiting:        3    5   1.7      4      32
Total:          4    5   1.7      4      32
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;so-why-do-we-need-maglev&quot;&gt;So Why Do We Need Maglev?&lt;/h1&gt;

&lt;p&gt;Clearly the PStore approach is not going to scale very well. Loading the full database on every request will become a bottlneck that can’t be ignored.  But as a way to explore what it feels like to program with persistent objects it is &lt;em&gt;amazing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At some point I hope that an open source project will make a viable alternative to using the Gemstone system. The pure object persistence Maglev represents requires language level bindings so that new object ids don’t collide with persisted object ids (plus many other concerns). Those are not easy problems to solve, but I hope that someone besides the old school of Smalltalkers will make it possible.&lt;/p&gt;</content><category term="ruby" /><summary type="html">TL\DR; Want to play with an object database? Skip Maglev and play with PStore.</summary></entry><entry><title type="html">puma mostly running on maglev</title><link href="http://localhost:4000/2014/02/28/puma-mostly-running-on-maglev.html" rel="alternate" type="text/html" title="puma mostly running on maglev" /><published>2014-02-28T22:43:00-07:00</published><updated>2014-02-28T22:43:00-07:00</updated><id>http://localhost:4000/2014/02/28/puma-mostly-running-on-maglev</id><content type="html" xml:base="http://localhost:4000/2014/02/28/puma-mostly-running-on-maglev.html">&lt;h2 id=&quot;tldr-puma-runs-on-maglev-with-a-few-caveats-full-support-is-around-the-corner&quot;&gt;TL\DR; Puma runs on maglev with a few caveats. Full support is around the corner?&lt;/h2&gt;

&lt;p&gt;My &lt;a href=&quot;/blog/2014/02/26/puma-runs-on-maglev&quot;&gt;last post&lt;/a&gt; was a perfect example of why you shouldn’t post something until you are sure…&lt;/p&gt;

&lt;p&gt;But it turns out that I wasn’t too far off. &lt;a href=&quot;https://github.com/MagLev/maglev/tree/tim/github313&quot;&gt;Tim’s IO.select fix&lt;/a&gt; got us past the first hurdle and once he had fixed that puma would run, but it would hang on every request.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;I have never wished so much that a program would just crash and fail rather than hang. Since I have no experience running a real debugger or profiler in Maglev I had to fall back to the tried and trusty “puts debugging” technique. This also meant going on a deep dive through &lt;a href=&quot;http://puma.io/&quot;&gt;Puma’s&lt;/a&gt; &lt;a href=&quot;https://github.com/puma/puma&quot;&gt;codebase&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It has been a while since I had last worked on a codebase that made heavy use of Thread, mutexes and reactors. Luckily for me Puma uses all of them at the same time! Eventually I found the call to IO.read_nonblock that was causing the issue. I wrote &lt;a href=&quot;https://gist.github.com/hqmq/9278656&quot;&gt;a little gist&lt;/a&gt; to narrow down the problem and &lt;a href=&quot;https://github.com/MagLev/maglev/issues/338&quot;&gt;submitted an issue&lt;/a&gt; on the Maglev repo. After the fast fix I got from Tim on the IO.select problem I figured submitting an issue was probably good enough.&lt;/p&gt;

&lt;h2 id=&quot;the-journey&quot;&gt;The Journey&lt;/h2&gt;

&lt;p&gt;This morning at work I had a nagging feeling. My “Open Source Conscience” was burning. Why was I waiting for someone else to fix the bug? I am definitely not qualified to try to fix low-level issues on a language implementation, but I should at least try.&lt;/p&gt;

&lt;p&gt;So on my lunch break I sat on a couch with my laptop and started reading through source code. &lt;a href=&quot;https://github.com/johnnyt&quot;&gt;Johnny T&lt;/a&gt; suggested I take a look at how &lt;a href=&quot;http://rubini.us/&quot;&gt;Rubinius&lt;/a&gt; implemented the method, but Rubinius was using lots of things specific to their implementation of an IO object whereas Maglev was leaning heavily on the smalltalk/Gemstone implementation of IO. So there wasn’t much in common.&lt;/p&gt;

&lt;p&gt;Then it dawned on me that read_nonblock was really just a wrapper around a system level call. There shouldn’t be much implementation to even look at. Gemstone definitely runs other web servers and they certainly must be using some of the same sort of IO primitives as puma uses. So I went back to my dear friend IRB.&lt;/p&gt;

&lt;h2 id=&quot;the-discovery&quot;&gt;The Discovery&lt;/h2&gt;

&lt;p&gt;The IRB session went something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ maglev-irb
irb(main):001:0&amp;gt; sock = TCPSocket.new('127.0.0.1', 2000)
=&amp;gt; #&amp;lt;TCPSocket:0xca63501 @_st_fileDescriptor=12 @_st_lineNumber=nil @_st_readWaiters=nil @_st_writeWaiters=nil @_st_readyEvents=0 @_st_pollArrayOfs=-1 @_st_selectWaiters=nil @_st_readBuffer=nil @_st_bufferOffset=nil @_st_isRubyBlocking=true&amp;gt;
irb(main):002:0&amp;gt; (sock.methods - Object.methods).sort
=&amp;gt; [&quot;&amp;lt;&amp;lt;&quot;, &quot;accept&quot;, &quot;accept_nonblock&quot;, &quot;addr&quot;, &quot;all?&quot;, &quot;any?&quot;, &quot;bind&quot;, &quot;binmode&quot;, &quot;bytes&quot;, &quot;chars&quot;, &quot;close&quot;, &quot;close_read&quot;, &quot;close_write&quot;, &quot;closed?&quot;, &quot;collect&quot;, &quot;connect&quot;, &quot;connect_nonblock&quot;, &quot;connected?&quot;, &quot;count&quot;, &quot;cycle&quot;, &quot;detect&quot;, &quot;drop&quot;, &quot;drop_while&quot;, &quot;each&quot;, &quot;each_byte&quot;, &quot;each_char&quot;, &quot;each_cons&quot;, &quot;each_line&quot;, &quot;each_slice&quot;, &quot;each_with_index&quot;, &quot;ensure_open_and_readable&quot;, &quot;ensure_open_and_writable&quot;, &quot;entries&quot;, &quot;enum_cons&quot;, &quot;enum_slice&quot;, &quot;enum_with_index&quot;, &quot;eof?&quot;, &quot;fcntl&quot;, &quot;fileno&quot;, &quot;find&quot;, &quot;find_all&quot;, &quot;find_index&quot;, &quot;first&quot;, &quot;flush&quot;, &quot;fsync&quot;, &quot;getbyte&quot;, &quot;getc&quot;, &quot;getpeername&quot;, &quot;gets&quot;, &quot;getsockname&quot;, &quot;getsockopt&quot;, &quot;grep&quot;, &quot;group_by&quot;, &quot;inject&quot;, &quot;isatty&quot;, &quot;lineno&quot;, &quot;lineno=&quot;, &quot;lines&quot;, &quot;listen&quot;, &quot;map&quot;, &quot;max&quot;, &quot;max_by&quot;, &quot;member?&quot;, &quot;min&quot;, &quot;min_by&quot;, &quot;minmax&quot;, &quot;minmax_by&quot;, &quot;none?&quot;, &quot;one?&quot;, &quot;partition&quot;, &quot;peeraddr&quot;, &quot;pid&quot;, &quot;print&quot;, &quot;printf&quot;, &quot;putc&quot;, &quot;puts&quot;, &quot;read&quot;, &quot;read_nonblock&quot;, &quot;readchar&quot;, &quot;readline&quot;, &quot;readlines&quot;, &quot;readpartial&quot;, &quot;recv&quot;, &quot;recv_nonblock&quot;, &quot;recvfrom&quot;, &quot;recvfrom_nonblock&quot;, &quot;reduce&quot;, &quot;reject&quot;, &quot;reopen&quot;, &quot;reverse_each&quot;, &quot;rewind&quot;, &quot;seek&quot;, &quot;select&quot;, &quot;set_blocking&quot;, &quot;setsockopt&quot;, &quot;shutdown&quot;, &quot;sort&quot;, &quot;sort_by&quot;, &quot;sorter&quot;, &quot;stat&quot;, &quot;sync&quot;, &quot;sync=&quot;, &quot;sysaccept&quot;, &quot;sysread&quot;, &quot;sysseek&quot;, &quot;syswrite&quot;, &quot;take&quot;, &quot;take_while&quot;, &quot;to_i&quot;, &quot;to_io&quot;, &quot;tty?&quot;, &quot;ungetc&quot;, &quot;write&quot;, &quot;zip&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sitting nearby the read methods there was something called recv_nonblock. A quick grep through the codebase showed that this method accepts two parameters, a maximum number of bytes to read and an optional string buffer to copy bytes into.  That sounds just like read_nonblock.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;So I opened the definition for IO and added this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby src/kernel/bootstrap/IO.rb
def read_nonblock(*args)
  recv_nonblock(*args)
end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then I recompiled maglev (which by the way is awesome because it actually just reloads all the ruby definitions into the persistent stone) and tried to run my little gist and it worked! So I forked the maglev repo, pushed up my changes to a branch on my fork and submitted a &lt;a href=&quot;https://github.com/MagLev/maglev/pull/339&quot;&gt;pull request&lt;/a&gt;. This pull request got merged within a few hours!&lt;/p&gt;

&lt;h2 id=&quot;so-puma-runs-now&quot;&gt;So Puma runs now???&lt;/h2&gt;

&lt;p&gt;YES! Puma 2.8.0 runs out of the box on magelv (once Tim’s pull request gets merged).&lt;/p&gt;

&lt;h2 id=&quot;how-fast-is-it&quot;&gt;How Fast Is It???&lt;/h2&gt;

&lt;p&gt;Running the same “Hello World” rack app as my previous post here are the quick numbers by testing with “ab -n 1000 -c 10 http://127.0.0.1:9292/”&lt;/p&gt;
&lt;table style=&quot;text-align: right;&quot; cellpadding=&quot;10&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&amp;nbsp;&lt;/th&gt;
      &lt;th&gt;mean (ms)&lt;/th&gt;
      &lt;th&gt;standard deviation (ms)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby 2.1.0&lt;/td&gt;
      &lt;td&gt;2.691&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Maglev Head + Tim's Fix&lt;/td&gt;
      &lt;td&gt;7.081&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-about-those-caveats-you-mentioned&quot;&gt;What about those caveats you mentioned?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Trying to use clustered mode (ie multiple processes) throws an error about SIGCHILD&lt;/li&gt;
  &lt;li&gt;I have seen Puma hang under heavy load on in this setup&lt;/li&gt;
  &lt;li&gt;I still haven’t tested every feature that Puma supports&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-moral-of-the-story&quot;&gt;The Moral of the Story&lt;/h2&gt;

&lt;p&gt;So Puma+Maglev works at a basic level and is nearly as fast as Puma+2.1.0. But the real moral of the story is to go and try something. I am totally unqualified to understand all the nuances of a webserver like Puma. I am barely even capable of reading a lot of Maglev’s source code. But even I was able to find a problem and a solution just because I wanted to see something happen and I was willing to spend a little bit of time on it.&lt;/p&gt;

&lt;p&gt;I’m sure someone with a better understanding of Gemstone would have been able to use a better debugging technnique than a bunch of puts statements. I’m sure they could find a more clever solution to the read_nonblock problem, but something works today that didn’t work yesterday because I tried. That is pretty cool.&lt;/p&gt;</content><category term="ruby" /><category term="maglev" /><category term="puma" /><summary type="html">TL\DR; Puma runs on maglev with a few caveats. Full support is around the corner?</summary></entry><entry><title type="html">Puma runs on Maglev</title><link href="http://localhost:4000/2014/02/26/puma-runs-on-maglev.html" rel="alternate" type="text/html" title="Puma runs on Maglev" /><published>2014-02-26T21:22:00-07:00</published><updated>2014-02-26T21:22:00-07:00</updated><id>http://localhost:4000/2014/02/26/puma-runs-on-maglev</id><content type="html" xml:base="http://localhost:4000/2014/02/26/puma-runs-on-maglev.html">&lt;h2 id=&quot;edit-after-writing-this-i-discovered-that-there-was-an-problem-with-my-gem_path-environment-variable-so-puma-was-actually-running-under-mri-no-wonder-it-was-running-at-almost-the-exact-same-speed-as-mri--sorry-for-the-false-information&quot;&gt;Edit: After writing this I discovered that there was an problem with my GEM_PATH environment variable so puma was actually running under MRI. No Wonder it was running at almost the exact same speed as MRI :) Sorry for the false information.&lt;/h2&gt;

&lt;p&gt;In my last post I talked about debugging my problems when trying to get puma running under maglev.  In just a few short days I’ve gotten help on the mailing list, at a users group and on the &lt;a href=&quot;https://github.com/MagLev/maglev/issues/313&quot;&gt;Maglev&lt;/a&gt; github repo. The result of that help is that I can run puma under Maglev!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-patches&quot;&gt;What patches?&lt;/h2&gt;

&lt;p&gt;There is a small patch that has to be made to the puma gem itself to make it read with a &lt;a href=&quot;https://github.com/puma/puma/blob/e4cf1573f13cca1fcea281af8acf6f452803d545/lib/puma/binder.rb#L193&quot;&gt;smaller backlog size&lt;/a&gt; of 512 to avoid a problem with Gemstone. I plan on making a pull request that lets you configure this in your normal puma config file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/timfel&quot;&gt;Tim Felgentreff&lt;/a&gt; made a branch on maglev that fixes an issue with using &lt;code&gt;Kernel.select&lt;/code&gt; with &lt;code&gt;Pipe&lt;/code&gt; objects. It looks like the branch builds just fine so I expect it will find its way into master pretty soon.&lt;/p&gt;

&lt;p&gt;That means that within a small time (a couple days or weeks?) you will be able to run puma out of the box on maglev with just a configuration tweak.&lt;/p&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance?&lt;/h2&gt;

&lt;p&gt;Micro-benchmarks are not meaningful blah blah blah…&lt;/p&gt;

&lt;p&gt;But I can’t seem to post without some numbers. The whole reason I started looking into this was because people will walk away from Maglev purely on the basis that Webrick is the only option for a webserver. So this needs to not only run, but run pretty quickly if it is going to be worth the effort.&lt;/p&gt;

&lt;p&gt;These tests were done with Puma 2.7.1 (in quite mode to avoid console IO skewing the results) running 2 workers with 4 threads each and a “Hello World” rack app. Once the webserver was running we hit it with apache benchmark like this: &lt;code&gt;ab -c 10 -n 5000 'http://127.0.0.1:9292/'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ruby 2.1.0&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mean  2ms (+/- 0.7ms standard deviation)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Maglev tim/github313 branch&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mean 2ms (+/- 0.7ms standard deviation)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I tried several other settings of number of workers and threads and Ruby 2.1.0 and Maglev are neck and neck on every benchmark.&lt;/p&gt;

&lt;h2 id=&quot;wrapup&quot;&gt;Wrapup&lt;/h2&gt;

&lt;p&gt;This all boils down to the fact that Maglev is approaching a point where you can get all the nice Maglev/Gemstone candy without making huge sacrifices about what tools you can use and what performance you can expect.&lt;/p&gt;

&lt;p&gt;It also proves that people are actively working on making Maglev better so the tools and processes will continue to improve.&lt;/p&gt;</content><category term="ruby" /><category term="maglev" /><category term="puma" /><summary type="html">Edit: After writing this I discovered that there was an problem with my GEM_PATH environment variable so puma was actually running under MRI. No Wonder it was running at almost the exact same speed as MRI :) Sorry for the false information.</summary></entry><entry><title type="html">Debugging Maglev</title><link href="http://localhost:4000/2014/02/22/debugging-maglev.html" rel="alternate" type="text/html" title="Debugging Maglev" /><published>2014-02-22T10:36:00-07:00</published><updated>2014-02-22T10:36:00-07:00</updated><id>http://localhost:4000/2014/02/22/debugging-maglev</id><content type="html" xml:base="http://localhost:4000/2014/02/22/debugging-maglev.html">&lt;h2 id=&quot;tldr-maglev-still-has-a-way-to-go-but-they-provide-some-very-low-level-information-to-help-debug&quot;&gt;TL/DR; Maglev still has a way to go, but they provide some very low-level information to help debug.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://puma.io/&quot;&gt;Puma&lt;/a&gt; is a really powerful webserver and that is something that Maglev really needs. As far as I can find the only webserver option that Maglev users have today is Webrick. I love that ruby comes with Webrick out of the box as a fast and easy way to make an HTTP server, but the benchmark below tells the story of why maglev also needs a production-ready webserver:&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;```text Ruby 2.1.0 hello world rack app benchmark, 1000 requests, 10 at a time
                  mean   +/-sd
Webrick       26ms   5.5ms
Puma           4ms   1.4ms&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
So let's see if we can get puma to run on maglev.

First here is our most basic rack app that we will use for testing (also used for the benchmark above):

```ruby hello world rack app
app = lambda do |env| 
  [200, { 'Content-Type' =&amp;gt; 'text/html' }, [&quot;Hello World\n&quot;]]
end 

run app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Does it build under maglev?&lt;/strong&gt; YES! Puma has some native C extensions that help to make it fast. Luckily for us these extensions build just fine on the latest maglev.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So does it work?&lt;/strong&gt; Uh…&lt;/p&gt;

&lt;p&gt;```text maglev rackup with puma
$ gem install rack puma –no-ri –no-rdoc
…
$ rackup -s puma rack_app.ru
Puma 2.7.1 starting…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Min threads: 0, max threads: 16&lt;/li&gt;
  &lt;li&gt;Environment: development&lt;/li&gt;
  &lt;li&gt;Listening on tcp://0.0.0.0:9292
ERROR 2702 , arg to listen must be &amp;gt;= 1 and &amp;lt;= 1000 (ArgumentError)
```&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That isn’t much of an error message. How can we get more? Good luck trying to google maglev debugging, but luckily I did remember &lt;a href=&quot;http://maglev.github.io/docs/issue_tracking.html#stack_traces&quot;&gt;this page&lt;/a&gt; on the maglev site about how to report bugs. You have to &lt;em&gt;turn on&lt;/em&gt; backtraces for maglev, because who wants a backtrace by default???&lt;/p&gt;

&lt;p&gt;So lets try this again:&lt;/p&gt;

&lt;p&gt;```text maglev rack with puma + backtraces
$ export MAGLEV_OPTS=”-d”
michael@hair maglev-webserver
$ rackup -s puma rack_app.ru
 &lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;_____
|                             Configuration Files                             |
|                                                                             |
| System File: /Users/michael/.rvm/rubies/maglev-head/etc/system.conf         |
    …there is a lot of debug output now from maglev…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Listening on tcp://0.0.0.0:9292
error , arg to listen must be &amp;gt;= 1 and &amp;lt;= 1000,
           during /Users/michael/.rvm/gems/maglev-head/bin/maglev-ruby_executable_hooks
Buffered output from initialization file /tmp/ruby.ciNi
topaz&amp;gt; ! Do not set the stone name in this file, maglev-ruby will override it.
  …there’s our error followed by more debug stuff, and finally it dumps us in topaz…
topaz 1&amp;gt; stack
==&amp;gt; 1 AbstractException » _outer:with:        (envId 0) @8 line 19
  receiver [153513473 sz:20  ArgumentError] arg to listen must be &amp;gt;= 1 and &amp;lt;= 1000
  …holy crap there is a lot of output but eventually we get to…
20 RubySocket # listen#1__                  (envId 1) @16 line 4
  receiver [153512961  TCPServer]   aTCPServer
  queue_size 1024
  aTmp1 1024
```&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maglev is not just dumping a language level stacktrace, it gives us an interpreter level strack trace with all the gory details. Amidst all those lines we can see that the 20th step before crashing it tried to call RubySocket#listen with an argument of queue_size = 1024. If we search the maglev repo for the error message it leads us &lt;a href=&quot;https://github.com/MagLev/maglev/blob/75bb360ac79c014c9ada02d47f2bb240186c6f92/src/kernel/bootstrap/Socket.rb#L361&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```ruby src/kernel/bootstrap/Socket.rb
  def listen(queue_size=10)
    queue_size = Maglev::Type.coerce_to(queue_size, Fixnum, :to_int)
    if queue_size &amp;lt; 1 || queue_size &amp;gt; 1000
      raise ArgumentError , ‘arg to listen must be &amp;gt;= 1 and &amp;lt;= 1000’
    end
    self.__listen(queue_size)
    0
  end&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
So can we change puma's behavior and ask it to listen with a smaller queue size? Well if we search through some of puma's source code we find [this](https://github.com/puma/puma/blob/4b866671dd2c604a4138f9b34e14fd98948ed52c/lib/puma/binder.rb#L193):

```ruby lib/puma/binder.rb
  def add_tcp_listener(host, port, optimize_for_latency=true, backlog=1024)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So lets just change our local copy of the gem to default to the backlog to 512. And try to run it again:&lt;/p&gt;

&lt;p&gt;```text maglev rack with puma (backlog=512) + backtraces&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Listening on tcp://0.0.0.0:9292
Error in reactor loop escaped: NoMethodError: undefined method &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout_at' for NilClass (NoMethodError)
/Users/michael/.rvm/gems/maglev-head/gems/puma-2.7.1/lib/puma/reactor.rb:65:in &lt;/code&gt;run_internal’
/Users/michael/.rvm/rubies/maglev-head/src/kernel/bootstrap/Array.rb:886:in &lt;code class=&quot;highlighter-rouge&quot;&gt;each'
&lt;/code&gt;``&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get this error repeating infinitely and curl requests will timeout without a response.&lt;/p&gt;

&lt;p&gt;Clearly this rabbit hole goes deeper and we still need to shave a few yaks before we can get puma running, but knowing how to debug in maglev has pointed us in the right direction.&lt;/p&gt;</content><category term="ruby" /><category term="maglev" /><category term="puma" /><summary type="html">TL/DR; Maglev still has a way to go, but they provide some very low-level information to help debug.</summary></entry><entry><title type="html">Maglev on AWS t1.micro</title><link href="http://localhost:4000/2014/02/16/maglev-on-aws-t1-dot-micro.html" rel="alternate" type="text/html" title="Maglev on AWS t1.micro" /><published>2014-02-16T10:23:00-07:00</published><updated>2014-02-16T10:23:00-07:00</updated><id>http://localhost:4000/2014/02/16/maglev-on-aws-t1-dot-micro</id><content type="html" xml:base="http://localhost:4000/2014/02/16/maglev-on-aws-t1-dot-micro.html">&lt;h2 id=&quot;tldr-if-you-want-to-run-maglev-on-a-small-aws-instance-you-probably-need-to-reduce-the-shared-page-cache-size-try-adjusting-the-shr_page_cache_size_kb-setting-in-systemconf&quot;&gt;TL/DR; If you want to run maglev on a small AWS instance you probably need to reduce the shared page cache size. Try adjusting the SHR_PAGE_CACHE_SIZE_KB setting in system.conf&lt;/h2&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://maglev.github.io/&quot;&gt;Maglev&lt;/a&gt; is really awesome and I want to make a few toy apps and host them on my t1.micro AWS instance.&lt;/p&gt;

&lt;p&gt;When I did a vanilla RVM install of maglev head I got a bunch of output that ended with this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;startstone[Info]: Starting Stone repository monitor 'maglev'.

startstone[Error]: Stone process (id=12577) has died.
startstone[Error]: Examine '/usr/local/rvm/rubies/maglev-head/log/maglev/maglev.log' for more information.  Excerpt follows:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The logfile it pointed me to contained this little nuggest:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; The stone was unable to start a cache page server on host '&amp;lt;stone's host&amp;gt;'.
Reason:  connect to cache monitor failed.
  Monitor process (8207) did not start.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There was an additional log file in the same directoy called maglev_8207pcmon.log which said:&lt;/p&gt;

&lt;p&gt;```bash /usr/local/rvm/rubies/maglev-head/log/maglev/maglev_8207pcmon.log
…
 &lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;___
|   GEMSTONE_GLOBAL_DIR = /usr/local/rvm/rubies/maglev-head                   |
|&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;___|
|   GemStone could not retrieve the IPC identifier associated with the memory |
|   key 1778474068.  shmget() error = errno=22,EINVAL, Invalid argument (programmer
| error).                                                                     |
|                                                                             |
  GemStone could not attach to the shared page cache.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                  cache size is less than the operating system imposed
                  minimum or greater than the operating system maximum. --- 02/15/14 05:34:54.982 UTC :Starting shrpcmonitor shutdown --- 02/15/14 05:34:54.982 UTC :Waiting for crashed slot recovery thread to shutdown...Done. --- 02/15/14 05:34:54.982 UTC :Waiting for clean slot recovery thread to shutdown...Done. --- 02/15/14 05:34:54.982 UTC :Waiting for stats thread to shutdown...Done. --- 02/15/14 05:34:54.982 UTC :All threads have stopped.   The Shared Page Cache Monitor is shutting down. ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;from-a-yak-to-a-solution&quot;&gt;From a Yak to a Solution&lt;/h2&gt;

&lt;p&gt;A little bit of googling led me to &lt;a href=&quot;http://programminggems.wordpress.com/2012/04/06/configuring-shared-memory/&quot;&gt;a Gemstone/S article&lt;/a&gt; which explained a bit about the shared memory, but in this case the maglev installer had set all the correct values for shared memory settings and the stone was still failing to start. So I checked the system.conf file for maglev which included the SHR_PAGE_CACHE_SIZE_KB setting. It was defaulted to ~1GB of shared memory, but a t1.micro has less than 600MB so I changed the setting like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text /usr/local/rvm/rubies/maglev-head/etc/system.conf
#SHR_PAGE_CACHE_SIZE_KB = 1000000;
SHR_PAGE_CACHE_SIZE_KB = 307200;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now maglev starts with a happy little success message.&lt;/p&gt;</content><category term="ruby" /><category term="maglev" /><category term="aws" /><summary type="html">TL/DR; If you want to run maglev on a small AWS instance you probably need to reduce the shared page cache size. Try adjusting the SHR_PAGE_CACHE_SIZE_KB setting in system.conf</summary></entry></feed>
